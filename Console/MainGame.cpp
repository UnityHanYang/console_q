#include "MainGame.h"

// 당분간 초기화는 생성자에서 진행된다.
MainGame::MainGame() : _x(0) // -> 맴버 이니셜라이저 -> 상수, 상속 관계에서 빛을 발한다
{
	// 스코프 초기화
	_Number = 500;

	cout << "당분간 여기에 코딩을 하도록" << endl;

	/*
	- C++ 언어는 생성자에 한해 맴버 변수를 초기화 하는 맴버 이니셜라이저라는 기능을
	지원하고 있다.

	- 필요한 순간
		ㄴ 1. 객체의 맴버 변수로 심볼릭 상수를 지니고 있을 경우
		ㄴ 2. 상속 관계에서 부모 클래스의 생서자 호출이 필요 할 경우
	*/
}

// 소멸자
MainGame::~MainGame()
{
	//! Do Nothing;
	// 지금은 사용은 안 하고 있으나 나중에 추가할 여지가 있으므로
	// 건들지 말 것
}

void MainGame::outPut()
{
	cout << _Number << endl;
}

void MainGame::showPosition(void)
{
	cout << "x: " << _x <<  ", y : " << _y << endl;
}

void MainGame::movePosition(void)
{
	_x += 100;
	_y += 100;
}

void MainGame::setPosition(int x, int y)
{
	// 클래스는 -> 캡슐화
	// 변수는 private이지만, 함수는 public이므로 함수 인자를 통해 변수의
	// 값을 자유롭게 변경할 수 있다는 문제점이 있다.
	_x = x;
	_y = y;

	/*
	 this
	
	- 자기자신을 가리키는 포인터

	- 모든 클래스의 맴버 함수는 자기 자신을 지칭하는 this 키워드를 통해서 효율적으로
	맴버를 관리하는 것이 가능하다.

	- 또한 이름 중복에 의해서 발생하는 우선 순위에 대한 모호함을 없앨 수 있다.
	*/

	this->_x = x;
	this->_y = y;
	// 함수가 public이긴 하지만 this가 붙으면 접근을 하지 못한다.
	// 대기 상태
}

/*
과제1. 짝 맞추기

- 노 클래스

- 사이즈: 5 x 4

- ☆ ★ ◇ ◆ ♤ ♠ ♡ ♥ ♧ ♣
ㄴ 아스키 코드 쓰기

- 짝이 맞춰진 번호는 계속 오픈된 상태로 유지해야 한다.

- 2가지 버전으로 치트를 만들어 온다.
	ㄴ 1. 치트키를 누르면 패를 전부 오픈시켜 플레이어에게 보여주고 5초 뒤에
		  다시 원상 복귀
	ㄴ 2. 치트키를 누르면 한 쌍의 카드를 제외하고 전부 오픈
		  이후 사용자가 마지막 한 쌍을 맞추면서 게임이 종료되면 OK

- 종료된 게임에서 재시작하기 기능을 추가할 것

※ 과제 유무에 따라서 깜지 없음

타임 어택. 월남뽕

- 시간은 10분

한 줄 조사. 상속

- 비유할 것 생각해 온다.
ㄴ 딮하면 그냥 빠지도록

- 노트에 적어온다.

*/


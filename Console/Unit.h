#pragma once
#include <iostream>

using namespace std;

#pragma region 상속
/*
▶ 상속이란?

- 기존 클래스가 지니고 있는 맴버 변수 또는 맴버 함수를 이어 받아 새로운 기능을
확장하는 것을 의미한다.

- 상속을 이용하면 중복적으로 발생하는 기능 또는 속성을 하나의 클래스에 선언 후 해당
클래스를 사용하는 것이 가능하다.

▷ 올바른 상속 관계를 만들어 내는 규칙

- is a의 관계 (특정 클래스가 또 다른 클래스의 모습으로 허용 될 경우)
- has a의 관계 (특정 클래스가 또 다른 클래스로 포함이 될 경우)

EX)
- 인간은 학생이다. X
- 학생은 인간이다. O

- 학생은 인간이기도 하기 때문에 is a의 관계가 성립이 된다.
	ㄴ 바꿔말하면 학생 클래스가 인간 클래스를 상속한다면 이는
		올바른 구조라는 것을 의미한다.

 문법

- class 파생 클래스명(자식 클래스) : 접근 지정자 기본 클래스 (부모 클래스)
ㄴ 접근 지정자는 생략이 가능하다.

private 상속

- 기본 클래스를 private로 상속 받으면 기본 클래스의 protected, public 맴버들은 모두
파생 클래스의 private 맴버로 상속 확장된다.

public 상속

- 기본 클래스를 public으로 상속 받으면 기본 클래스의 protected, public 맴버들은 접근
지정 변경 없이 파생 클래스의 public 맴버로 확장된다.

protected 상속

- 기본 클래스를 proteceted로 상속 받으면 기본 클래스의 protected, public 맴버들은 접근
지정 변경 없이 파생 클래스의 protected 맴버로 확장된다.

▶ 객체 지향 프로그래밍의 4대 요소 (특징)

- 캡슐화

- 다형성

- 캡슐화

- 추상화
*/
#pragma endregion

class Unit
{
protected:
	const char* name;
	int hp;
	int mp;
	int atk;
	bool die;

public:
	/*
	★ 사골 문제 ★
	- 함수 오버로딩

	- 동일한 이름의 함수라 하더라도 입력 매개변수가 서로 다르다면 별개의 함수라고 인지하는
	기능을 제공한다.

	- 해당 기능을 함수 오버로딩이라고 지칭한다.

	- 함수 오버로딩의 규칙은 입력 매개변수만으로 구분하기 때문에 함수의 반환형이
	다르다 하더라도 이는 함수 오버로딩 규칙이 성립하지 않는다.

	- 기존에 만들어 놓은 함수와 이름은 같지만 인자의 형태가 다른 함수
		ㄴ 같은 클래스의 맴버함수 간에 이뤄진다.

	- 인자 형태는 같은데 반환값만 다를 경우는 모호한 표현 에러 발생
	*/
	void attack(const char* myName, const char* enemyName);
	void attack(int atk, int enemyHp);
	void attack(bool enemyDie);

	// C++ 클래스의 특성 중 다형성을 지원하기 위한 키워드
	// virtual void attack(): 가상 함수
	virtual void attack(); // 순수 가상 함수
	// 순수 가상 함수가 모인 집합을 인터페이스라 한다.

	Unit();
	virtual ~Unit(); // 자식의 생성자가 호출되면 자식껄 생성하고
	// 자식 생성자가 호출이 안 되면 자신껄 호출한다 
	// 부모의 소멸은 모든 자식의 소멸
};

/*
※ 과제가 끝나면 포트폴리오 선행 작업 하도록
ㄴ 단, 과제가 끝나면

과제1. 월남뽕 클래스화

- 클래스를 활용해 객체지향으로 나눈다.

- 최소 클래스는 5개 이상

- 추가로 우리가 과제로 진행한 가위바위보를 시작화면에서 선택할 수 있게 추가해 온다.
ㄴ 가위바위보는 -> 클래스화X
ㄴ 시작화면에서 월남뽕을 입력하면 월남뽕이 시작되고, 가위바위보를 입력하면 가위바위보를 할 수 있게 만든다.


과제2. 우리 가족은....

- 클래스 + 사용자 정의 자료형을 이용해서 우리 가족을 소개하는 내용을 출력한다.
ㄴ 구조체 + 열거형 + 함수를 적극 활용하도록

- 최소 클래스 3개 이상
ㄴ 가족 구성원이 3명이 안 된다면 임의로 추가할 것


과제1, 2는 상속을 해도 되고 안 해도 된다.
*/

